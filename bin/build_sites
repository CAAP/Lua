#!/usr/local/bin/lua53

local assert = assert
local popen = io.popen
local format = string.format
local open = io.open
local exec = os.execute
local concat = table.concat

local print = print
local ipairs = ipairs

local sites = require'carlos.sites'
local fd = require'carlos.fold'

local args = {...}

_ENV = nil

local HELP = [==[
usage:
build_sites PATH_DIR DEST_DIR
]==]

assert(#args == 2, HELP)

-- path to files is 1st argument; removing trailing slash
local DIR = args[1]:gsub('/$', '')

-- path to output is 2nd argument; removing trailing slash
local WWW = args[2]:gsub('/$', '')

-- name of folder
local STEM = DIR:match'/?([^/]+)$'

-- output DIR must match httpd deamon root directory
assert(WWW:match'htdocs', 'Not a root directory for the httpd deamon')

-- Uppercase letters plus underscore
local REGEX = '([%u_]+)'

-- Local Fn's

local function read_file(path)
    local f = assert(open(path))
    local s = f:read'a'
    f:close()
    return s
end

local function dump_str(str, path)
    local f = assert(open(path, 'w'))
    f:write(str)
    f:close()
    print('\nSuccess:', path, 'done.\n')
    return true
end

-- Replaces REGEX pattern and executes the command
local function check_cond(cmd, TB) return exec(cmd:gsub(REGEX, TB)) end

-- Checks in PATH whether files with given EXTENSION exists
local function condp(TB) return check_cond("ls DIR/*/*.EXT", TB) end

-- Looks for files under DIR with given EXTENSIONs, keeping only those EXTENSIONs
local function filter_exts(EXTS) return fd.reduce(EXTS, fd.filter(function(x) return condp{DIR=DIR, EXT=x} end), fd.into, {}) end

local function add_files(exts, ret)
    local fp = assert(popen(format("ls %s/*/*.{%s}", DIR, concat(exts,',')), 'r'))
    for f in fp:lines() do
	if f:match"onloaded.js" then ret.add_jscript( read_file(f), 'onloaded' )
	elseif f:match'body' then ret.add_body( read_file(f) )
	elseif f:match'css' then ret.add_css( read_file(f) )
	elseif f:match'jscript' then ret.add_jscript( read_file(f) )
	elseif f:match'head' then ret.set_head( read_file(f) )
	else print("Error: input file of different pattern", f) end
    end
    fp:close()
    return true
end

local function copy_files(exts)
    for _,ext in ipairs(exts) do
	if ext:match'svg' or ext:match'json' then
	    check_cond("cp -r DIR/EXT WWW/STEM", {DIR=DIR, STEM=STEM, EXT=ext, WWW=WWW})
	else
	    check_cond("cp DIR/EXT/*.EXT WWW/STEM", {DIR=DIR, STEM=STEM, EXT=ext, WWW=WWW:gsub('htdocs', 'cgi-bin')})
	end
    end
    return true
end

-------------------------
--	HTML file      --
-------------------------

local ret = sites.html()

-- Look for files under DIR with extensions css|js|html
local exts = filter_exts{"css", "js", "html"}
assert(#exts > 0, "Nothing to be done. None a single file found!")

-- Lists all files found under DIR and process them accordingly
add_files(exts, ret)

-- Dump HTML file 'index.html' in output directory
dump_str(ret.asstr(), format("%s/%s/%s", WWW, STEM, "index.html"))

-------------------------
--	Extra files    --
-------------------------

-- Look for files under DIR with extensions svg|json|lua
exts = filter_exts{"svg", "json", "lua"}
if #exts == 0 then return "Success" end

-- Lists all files found under DIR and copy them to OUTPUT dir
copy_files(exts)

