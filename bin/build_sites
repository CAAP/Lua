#!/usr/local/bin/lua53

local assert = assert
local popen = io.popen
local format = string.format
local exec = os.execute

local print = print

local fd = require'carlos.fold'

local args = {...}

_ENV = nil

local HELP = [==[
usage:
build_sites PATH_DIR DEST_DIR
]==]

assert(#args == 2, HELP)

-- path to files is 1st argument; removing trailing slash
local DIR = args[1]:gsub('/$', '')

-- path to output is 2nd argument; removing trailing slash
local WWW = args[2]:gsub('/$', '')

-- name of folder
local STEM = DIR:match'/?([^/]+)$'

-- Uppercase letters plus underscore
local REGEX = '([%u_]+)'

-- Local Fn's

-- Replaces REGEX pattern and executes the command
local function check_cond(cmd, TB) return exec(cmd:gsub(REGEX, TB)) end

local function extras()
    local mydirs = {svg=true, body=true, css=true, head=true, json=true, jscript=true}
    local fp = assert(popen(format("cd %s && ls -d *", DIR), 'r'))
    for f in fp:lines() do
	if not mydirs[f] then
	    print('\n\nExtra folder found', DIR, f)
	    check_cond("mkdir -p WWW/STEM/EXD", {WWW=WWW, STEM=STEM, EXD=f})
	    exec(format("build_site %s/%s %s %s", DIR, f, WWW, DIR))
	end
    end
    fp:close()
end



--- CHECK all folders & subfolders exist FIRST ---
check_cond("mkdir -p WWW/STEM", {WWW=WWW, STEM=STEM})
check_cond("mkdir -p WWW/STEM", {WWW=WWW:gsub('htdocs', 'cgi-bin'), STEM=STEM})

--- DO building of site FIRST ---
exec(format("build_site %s %s", DIR, WWW))

--- CHECK if there's any extra folders & DO building of extra sites NEXT ---
extras()

