local M = {}
-- Import Section
--
local fd = require'carlos.fold'

local file_exists  = require'carlos.bsd'.file_exists
local connect	   = require'carlos.sqlite'.connect
local reduce	   = require'carlos.fold'.reduce
local keys	   = require'carlos.fold'.keys
local into	   = require'carlos.fold'.into
local asJSON	   = require'carlos.json'.asJSON
local sleep	   = require'lbsd'.sleep
local env	   = os.getenv

local format 	   = string.format
local char	   = string.char
local tonumber	   = tonumber
local tointeger    = math.tointeger
local open	   = io.open
local time	   = os.time
local date	   = os.date
local assert	   = assert
local concat	   = table.concat

-- No more external access after this point
_ENV = nil -- or M

-- Local Variables for module-only access
--
local QUERY	   = 'SELECT * FROM updates %s'
local ROOT	   = '/var/www/htdocs/app-ferre/ventas/json'
local DEST	   = ROOT .. '/version.json'
local DEST_PRC	   = ROOT .. '/precios.json'
local DEST_PPL 	   = ROOT .. '/people.json'

local HOME	   = env'HOME'

--------------------------------
-- Local function definitions --
--------------------------------
--
local function tofruit( fruit, m ) return format('%s %s', fruit, m) end

local function hex(h) return char(tonumber(h, 16)) end

local function aspath(s) return format('%s/db/%s.db', HOME, s) end

local function asnum(s) return (tointeger(s) or tonumber(s) or s) end

local function now() return time() end -- -21600  3.mx.pool.ntp.org

local function asweek(t) return date('Y%YW%U', t) end

local function dbconn(path, create)
    local f = aspath(path)
    if create or file_exists(f) then
	return connect(f)
    else
	return false, format('ERROR: File %q does not exists!', f)
    end
end

-- remove 'vers' since it's an extra event in itself and add arg 'store'
local function prepare(w)
    w.vers = nil
    w.store = 'PRICE'
    return w
end

local function nulls(w)
    if w.precio2 == 0 then w.precio2 = nil end
    if w.precio3 == 0 then w.precio3 = nil end
    return w
end

--
-- Functions to compute the current/ongoing version
-- based on the latest WEEK file on existence
--

-- if 'db' file exists and 'updates' tb exists then returns count
local function which( db )
    local conn = dbconn( db )
    if conn and conn.exists'updates' then
	return conn.count'updates'
    else return 0 end
end

local function fromWeek(week, vers)
    local conn	 = dbconn(week)
    local clause = vers > 0 and format('WHERE vers > %d', vers) or ''
    local N	 = conn.count('updates', clause)

    if N > 0 then
	local data = fd.reduce(conn.query(format(QUERY, clause)), fd.map(prepare), fd.map(asJSON), fd.into, {})
	data[#data+1] = asJSON{vers=conn.count'updates', week=week, store='VERS'}
	return concat(data, ',\n')
    end
end

local function backintime(week, t) while week < asweek(t) do t = t - 3600*24*7 end; return t end

local function version()
    local hoy = now()
    local week = asweek( hoy )
    local vers = which( week )
    while vers == 0 do -- change in YEAR XXX
	hoy = hoy - SEMANA
	week = asweek( hoy )
	vers = which( week )
--	if week:match'W00' then break end
    end
    return {week=week, vers=vers}
end

-- ITERATIVE procedure AWESOME
local function nextWeek(t) return {t=t+SEMANA, vers=0} end

local function stream(week, vers)
    local function iter(wk, o)
	local w = asweek( o.t )
	if w > wk then return nil
	else return nextWeek(o.t), fromWeek(w, o.vers) end
    end
    return function() return iter, asweek(now()), {t=backintime(week, now()), vers=vers} end
end

--------------------------------
-- Public function definitions --
--------------------------------
--
-- accepts name of db (adds absolute path),
-- creating it if required, otherwise it checks
-- whether path already exists, always returning
-- the sql connection or error

M.aspath = aspath

M.now	 = now

M.asnum  = asnum

M.asweek = asweek

M.dbconn = dbconn

function M.newUID() return date('%FT%TP', now()) end

function M.connexec( conn, s ) return assert( conn.exec(s) ) end

function M.ssevent( event, data )
    if event == 'SSE' then return data
    else return format('event: %s\ndata: %s\n\n', event, data) end
end

function M.uid2week( uid )
    local Y, M, D = uid:match'(%d+)%-(%d+)%-(%d+)T'
    return asweek(time{year=Y, month=M, day=D})
end

function M.decode(msg)
    local cmd = msg:match'%a+'
    local data = {}
    for k,v in msg:gmatch'(%a+)=([^=&]+)' do data[k] = asnum(v) end
    return cmd, data
end

function M.urldecode(s) return s:gsub('+', '|'):gsub('%%(%x%x)', hex) end

function M.receive(srv)
    local function msgs() return srv:recv_msgs() end -- returns iter, state & counter
    local id, more = srv:recv_msg()
    if id and more then more = reduce(msgs, into, {}) end
    return id, more
end

-- DUMP
--local function myVersion() return format('version %s', asJSON(VERS)) end

--local function dumpVERS(v) dump(DEST, v) end

function M.dumpPRICE()
    local conn =  dbconn'ferre'
    local QRY = 'SELECT * FROM precios WHERE desc NOT LIKE "VV%"'
    local FIN = open(DEST_PRC, 'w')

    FIN:write'['
    FIN:write( concat(fd.reduce(conn.query(QRY), fd.map(nulls), fd.map(asJSON), fd.into, {}), ', ') )
    FIN:write']'
    FIN:close()
end

function M.getVersion()
    local VERS = version()
    local v = asJSON(VERS)
--    dumpVERS( v )
    dumpPRICE(DEST_PRC)
--    print('\n\tWeek:', VERS.week, '\n\tVers:', VERS.vers, '\n')
    return v
end

function M.dumpPEOPLE()
    local conn = dbconn'ferre'
    local QRY = 'SELECT id, nombre FROM empleados'
    local FIN = open(DEST_PPL, 'w')

    FIN:write'['
    FIN:write( concat(fd.reduce(conn.query(QRY), fd.map(asJSON), fd.into, {}), ', ') )
    FIN:write']'
    FIN:close()
end

function M.dumpFEED(conn, PATH, qry)
    local FIN = open(PATH, 'w')
    FIN:write'['
    FIN:write( concat(fd.reduce(conn.query(qry), fd.map(getName), fd.map(asJSON), fd.into, {}), ',\n') )
    FIN:write']'
    FIN:close()
    return 'Updates stored and dumped'
end

-- find all updates that need to be sent to a specific peer & send them all
function M.adjust(fruit, week, vers)
    local FIN = open(format('%s/%s.json', ROOT, fruit), 'w')
    FIN:write'['
    FIN:write( concat(fd.reduce(stream(week, vers), fd.into, {}), ',\n') )
    FIN:write']'
    FIN:close()
    return 'Updates stored and dumped'
end

-- Maybe should be in "ferre-server" where it is needed!!!XXX
function M.chunks(f)
    local k = 1
    return function(x)
	f(x)
	if k%100 == 0 then sleep(1) end
	k = k + 1
    end
end

-- XXX function 'send_msg' can optionally return IMMEDIATELY - NOWAIT flag
function M.cache(ps)
    local MM = {}
    local CACHE = {karl=ps}

    function MM.store(pid, msg) CACHE[pid] = msg end

    function MM.delete( pid ) CACHE[pid] = nil end

    function MM.sndkch(msgr, fruit) reduce(keys(CACHE), function(m) msgr:send_msg(tofruit(fruit, m)) end) end

    function MM.has( pid ) return CACHE[pid] end

    return MM
end

return M
